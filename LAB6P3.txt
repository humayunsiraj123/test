
module LAB6(SW,key,LEDR,HEX0,HEX1,HEX2,HEX3,HEX4,HEX5);
input[9:0]SW;
input key;
output [9:0]LEDR;
output [6:0] HEX0,HEX1,HEX2,HEX3,HEX4,HEX5;

wire clock,wren;
wire [4:0] address;
wire [3:0] data,q;
assign data=SW[3:0];
assign LEDR[3:0]=q;
assign address =SW[8:4];
assign clock =key;
assign wren=SW[9];


RAM R1(clock,address,data,wren,q);

HEXtoBIN H0(q,HEX0);
HEXtoBIN H1(data,HEX2);
HEXtoBIN H2(address[3:0],HEX4);
HEXtoBIN H3(address[4],HEX5);



endmodule


module HEXtoBIN(bin,SSD);
input [3:0]bin;
output reg [6:0]SSD;


always@(*)
begin
case(bin)
0:SSD=7'b0000001;
      1:SSD=7'b1001111;
      2:SSD=7'b0010010;
      3:SSD=7'b0000110;
      4:SSD=7'b1001100;
      5:SSD=7'b0100100;
      6:SSD=7'b0100000;
      7:SSD=7'b0001111;
      8:SSD=7'b0000000;
      9:SSD=7'b0001100;
      10:SSD=7'b0001000;
      11:SSD=7'b1100000;
      12:SSD=7'b0110001;
      13:SSD=7'b1000010;
      14:SSD=7'b0110000;
      15:SSD=7'b0111000;
endcase
end
 endmodule

module  RAM(clk,addr,din,wen,dout);
input clk,wen;
input [4:0]adrr;
input [3:0]din;
output reg [3:0]dout;

reg [3:0]mem[2**5-1:0];

always@(clk)
begin
if(wen)
mem[adrr]<=din;
else
dout<=mem[adrr];

end
endmodule
